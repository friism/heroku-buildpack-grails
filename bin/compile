#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Unset as these cause issues with building but we want our
# other env vars available
unset JAVA_OPTS
unset JAVA_TOOL_OPTIONS

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

if [ -z "$SASS_VERSION" ] ; then
    echo "*** No SASS_VERSION specified.  Defaulting to v3.2.1 ***"
    SASS_VERSION=3.2.1
fi


# source in common functions
. $BIN_DIR/common.sh

GRAILS_DIR=".grails"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

install_yuicompressor() {
    echo "-----> Installing YUI Compressor 2.4.7..."
    GEM_BIN="$PWD/.gem/bin"
    if [ ! -d  "$GEM_BIN" ]; then
      mkdir -p $GEM_BIN
    fi

    # Add .gem/bin to PATH if not already specified
    if [[ ":$PATH:" != *":$GEM_BIN:"* ]]; then
        export PATH=$GEM_BIN/:$PATH
    fi

    curl --silent --location https://github.com/southern-experience/heroku-buildpack-php/raw/master/src/yuicompressor-2.4.7.jar.tar.gz | tar xz
    export YUI="$PWD/yuicompressor-2.4.7.jar"

    curl --silent --location https://raw.github.com/southern-experience/heroku-buildpack-php/master/src/yuicompress > $PWD/.gem/bin/yuicompress
    chmod +x .gem/bin/yuicompress
    echo "       done."
}

install_sass() {
    echo "-----> Installing SASS..."
    GEM_DIR="$PWD/.gem"
    if [ ! -d "$GEM_DIR" ]; then
      mkdir -p $GEM_DIR
    fi

    gem install sass --version "$SASS_VERSION" --no-rdoc --no-ri --install-dir "$PWD/.gem" | indent
    export GEM_PATH=$GEM_PATH:$GEM_DIR
    echo "       done."
}

build_assets() {
    # Build assets
    echo "-----> Compiling assets..."
    bash build-assets | indent
    echo "       done."
}

check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails()
{
  VER_TO_INSTALL=$1
  GRAILS_URL="http://s3.amazonaws.com/heroku-jvm-buildpack-grails/grails-$VER_TO_INSTALL.tar.gz"

  GRAILS_TAR_FILE="grails-heroku.tar.gz"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_TAR_FILE

  # Error checking
  if [ ! -f $GRAILS_TAR_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  tar xzf $GRAILS_TAR_FILE
  rm $GRAILS_TAR_FILE

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi

GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"
echo "       WARNING: The Grails buildpack is currently in Beta."
if [ ! -z "$BUILDPACK_URL" ] ; then
    echo "       Using Build Pack: $BUILDPACK_URL"
fi

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

cd $CACHE_DIR

# install grails
if [ ! -d $GRAILS_DIR ]; then
  install_grails $GRAILS_VERSION
else
  INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
  if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
    echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
    rm -rf $GRAILS_DIR
    install_grails $GRAILS_VERSION
  fi
fi

# This is a simplisitic way to only set JAVA_HOME when on Cedar. If you run this
# script locally and your jdk is not in this location, you're responsible for
# setting it yourself. Need to find a smarter way of conditionally setting this var
if [ -d /usr/lib/jvm/java-6-openjdk ] ; then
    export JAVA_HOME=/usr/lib/jvm/java-6-openjdk
fi
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

# Install stuff we need for CSS and JS assets
install_sass
install_yuicompressor

cd $BUILD_DIR

build_assets

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# Cache priming option
# if a populated cache was checked in copy it into the cache
# remove the checked in cache dir aftewards to save slug size
if [ -d ivy-cache ]; then
  echo "-----> Found ivy-cache directory in the repo. Using it to prime the cache"
  cp -r ivy-cache $CACHE_DIR/.grails_cache/
  rm -r ivy-cache
fi

# create .grails directory in the user home and write a settings.groovy that points grails
# at the correct cache directory
if [ ! -d $HOME/.grails ]; then
  mkdir $HOME/.grails
fi

echo "grails.dependency.cache.dir = '$CACHE_DIR/.grails_cache'" >> $HOME/.grails/settings.groovy

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
fi

COMPILECMD="grails -Divy.default.ivy.user.dir=$CACHE_DIR compile --non-interactive"
echo "-----> Executing $COMPILECMD"
eval "$COMPILECMD" | sed -u 's/^/       /'
check_build_status

BUILDCMD="grails $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war --non-interactive"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

if [ ! -d server ] ; then
    JETTY_RUNNER_VERSION=7.5.4.v20111024

    echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
    mkdir server
    cp $GRAILS_HOME/jetty-runner-$JETTY_RUNNER_VERSION.jar server/jetty-runner.jar
    echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    echo "vendored:$JETTY_RUNNER_VERSION" > $CACHE_DIR/jettyVersion
fi


GRAILS_APP_NAME=$(get_property $BUILD_DIR/application.properties 'app.name')
GRAILS_APP_VERSION=$(get_property $BUILD_DIR/application.properties 'app.version')

send_deploy_notification $GRAILS_APP_NAME "$APP_NAME Deployment" $GRAILS_APP_VERSION 'No Additional Information'


